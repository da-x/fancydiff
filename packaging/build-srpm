#!/bin/bash -eu

OUTPUT_DIRECTORY=
PKG_NAME=fancydiff

syntax() {
    echo "build-srpm -o [output directory]"
    echo ""
    echo "This script can generate the SRPM"
}

while getopts "o:" o; do
    case "${o}" in
        o)
            OUTPUT_DIRECTORY=${OPTARG}
            ;;
        *)
            syntax
            exit 1
            ;;
    esac
done

if [ -z "$OUTPUT_DIRECTORY" ] ; then
    echo error: no output directory specified
    echo
    syntax
    exit 1
fi

if [ ! -d ${OUTPUT_DIRECTORY} ] ; then
    echo "error: output directory doesn't exist"
    exit 1
fi

t=`dirname ${BASH_SOURCE}`
if [[ ! -e ${t}/${PKG_NAME}.rpm.spec ]] ; then
    echo No such spec file
    exit -1
fi

PKG_VERSION=$(cat ${t}/../${PKG_NAME}.cabal | grep ^version: | awk -F" " '{print $2}')
PKG_RELEASE=`${t}/../version.sh simple`
RESOLVER=$(cat ${t}/../stack.yaml | grep '^resolver:' | awk -F" " '{print $2}')

TARGET_DIR=`mktemp --tmpdir -d XXXXXXrpm-packaging`

cleanups () {
    rm -rf ${TARGET_DIR}
}

trap cleanups EXIT

make_srpm() {
    mkdir -p ${TARGET_DIR}/SPECS || return 1
    mkdir -p ${TARGET_DIR}/SOURCES || return 1
    git archive --format tar.gz --prefix=${PKG_NAME}-${PKG_VERSION}/ HEAD > \
	${TARGET_DIR}/SOURCES/${PKG_NAME}-${PKG_VERSION}.tar.gz || return 1
    ${t}/../version.sh > ${TARGET_DIR}/SOURCES/Version.hs || return 1
    SPEC_FILE=${TARGET_DIR}/SPECS/${PKG_NAME}.spec
    cat ${t}/${PKG_NAME}.rpm.spec \
        | sed s/@@RESOLVER@@/${RESOLVER}/g \
        | sed s/@@PKG_VERSION@@/${PKG_VERSION}/g \
        | sed s/@@PKG_NAME@@/${PKG_NAME}/g \
        | sed s/@@PKG_RELEASE@@/${PKG_RELEASE}/g > ${SPEC_FILE} || return 1

    cd ${t}/../.stack-work/
    downloads=$(stack list-archive-downloads | awk -F ".stack-work/" '{print $2}')
    tar -czf ${TARGET_DIR}/SOURCES/stack-work-downloads.tar.gz ${downloads}
    cd - > /dev/null

    git log -n 1 --format="* %cd %aN%n- (%h) %s%d%n" --date=local | \
        sed -r 's/[0-9]+:[0-9]+:[0-9]+ //' >> ${SPEC_FILE}
    rpmbuild -bs --define "_topdir ${TARGET_DIR}" ${TARGET_DIR}/SPECS/${PKG_NAME}.spec || return 1
    return 0
}

make_srpm ${PKG_NAME}

for file in ${TARGET_DIR}/SRPMS/*.src.rpm; do
    cp ${file} ${OUTPUT_DIRECTORY}
done
